{"version":3,"sources":["actionTypes/intrinsicActionTypes.ts","utils/IntrinsicConstants.ts","reducers/intrinsicReducer.ts","store/index.ts","views/intrinsic.tsx","viewConnectors/vcIntrinsic.ts","reducerActions/intrinsicReducerActions.ts","App.js","index.js"],"names":["intrinsicActionTypes","Constants","FREE_CASH_FLOW_INPUT","TOTAL_SHARE_INPUT","DISCOUNT_RATE_INPUT","FIRST_5_YEAR_INC_RATE","NEXT_5_YEAR_INC_RATE","CASH_WHEN_COMPANY_WILL_SELL","initialState","cashFlowValues","cashComapnyHaveWhenWillBeSold","nextFiveYearIncrimentRate","firstFiveYearIncrimentRate","discountRate","totalShares","intrinsicValue","isAllFieldsFilled","intrinsicReducer","state","action","newState","type","CASH_FLOW_INPUT_CHANGE","data","name","value","VALIDATE_FIELDS","alert","RESET_VALUES","CALCULATE_INTRINSIC_VALUE","cashFlows","split","avgCashFlow","i","length","parseInt","Math","floor","nextTenYearFCF","isFiveYearDone","push","nextTenYearFCFPresentValues","totalFCFPresentValue","persentValue","pow","console","log","companySellingPrice","pvOfCashOnSellingTime","totalValueation","rootReducer","combineReducers","intrinsicReducerState","store","createStore","applyMiddleware","thunk","Intrinsic","Fragment","className","onChange","this","props","onInputChange","intrinsicState","placeholder","Button","onClick","calculateIntrinsicValue","variant","reset","React","Component","connect","dispatch","e","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e83f0888.chunk.js","sourcesContent":["enum intrinsicActionTypes {\r\n    CASH_FLOW_INPUT_CHANGE = 8678,\r\n    CALCULATE_INTRINSIC_VALUE,\r\n    VALIDATE_FIELDS,\r\n    RESET_VALUES\r\n}\r\n\r\nexport default intrinsicActionTypes;\r\n","export class Constants {\r\n    public static readonly FREE_CASH_FLOW_INPUT = \"FREE_CASH_FLOW_INPUT\";\r\n    public static readonly TOTAL_SHARE_INPUT = \"TOTAL_SHARE_INPUT\";\r\n    public static readonly DISCOUNT_RATE_INPUT = \"DISCOUNT_RATE_INPUT\";\r\n    public static readonly FIRST_5_YEAR_INC_RATE = \"FIRST_5_YEAR_INC_RATE\";\r\n    public static readonly NEXT_5_YEAR_INC_RATE = \"NEXT_5_YEAR_INC_RATE\";\r\n    public static readonly CASH_WHEN_COMPANY_WILL_SELL = \"CASH_WHEN_COMPANY_WILL_SELL\";\r\n\r\n}","import { Reducer } from \"redux\";\r\nimport intrinsicActionTypes from \"../actionTypes/intrinsicActionTypes\";\r\nimport { intrinsicDTO } from \"../DTOs/intrinsicDTO\";\r\nimport { Constants } from \"../utils/IntrinsicConstants\";\r\n\r\nconst initialState: intrinsicDTO = {\r\n  cashFlowValues: \"\",\r\n  cashComapnyHaveWhenWillBeSold: \"\",\r\n  nextFiveYearIncrimentRate: \"\",\r\n  firstFiveYearIncrimentRate: \"\",\r\n  discountRate: \"\",\r\n  totalShares: \"\",\r\n  intrinsicValue: 0,\r\n  isAllFieldsFilled: false,\r\n};\r\n\r\nconst intrinsicReducer: Reducer<intrinsicDTO> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case intrinsicActionTypes.CASH_FLOW_INPUT_CHANGE: {\r\n      if (action.data.name === Constants.FREE_CASH_FLOW_INPUT)\r\n        newState.cashFlowValues = action.data.value;\r\n      else if (action.data.name === Constants.CASH_WHEN_COMPANY_WILL_SELL) {\r\n        newState.cashComapnyHaveWhenWillBeSold = action.data.value;\r\n      } else if (action.data.name === Constants.DISCOUNT_RATE_INPUT) {\r\n        newState.discountRate = action.data.value;\r\n      } else if (action.data.name === Constants.FIRST_5_YEAR_INC_RATE) {\r\n        newState.firstFiveYearIncrimentRate = action.data.value;\r\n      } else if (action.data.name === Constants.NEXT_5_YEAR_INC_RATE) {\r\n        newState.nextFiveYearIncrimentRate = action.data.value;\r\n      } else if (action.data.name === Constants.TOTAL_SHARE_INPUT) {\r\n        newState.totalShares = action.data.value;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.VALIDATE_FIELDS: {\r\n      if (\r\n        newState.cashComapnyHaveWhenWillBeSold === \"\" ||\r\n        // TODO : cashFlowValues validation pending\r\n        newState.cashFlowValues === \"\" ||\r\n        newState.discountRate === \"\" ||\r\n        newState.firstFiveYearIncrimentRate === \"\" ||\r\n        newState.nextFiveYearIncrimentRate === \"\" ||\r\n        newState.totalShares === \"\"\r\n      ) {\r\n        newState.isAllFieldsFilled = false;\r\n        alert(\"All fields are required\");\r\n      } else {\r\n        newState.isAllFieldsFilled = true;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.RESET_VALUES: {\r\n      newState.cashComapnyHaveWhenWillBeSold = \"\";\r\n      newState.cashFlowValues = \"\";\r\n      newState.discountRate = \"\";\r\n      newState.firstFiveYearIncrimentRate = \"\";\r\n      newState.nextFiveYearIncrimentRate = \"\";\r\n      newState.totalShares = \"\";\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.CALCULATE_INTRINSIC_VALUE: {\r\n      if (newState.isAllFieldsFilled) {\r\n        const cashFlows = newState.cashFlowValues.split(\",\");\r\n        let avgCashFlow = 0;\r\n        for (let i = 0; i < cashFlows.length; i++) {\r\n          avgCashFlow = avgCashFlow + parseInt(cashFlows[i]);\r\n        }\r\n        avgCashFlow = Math.floor(avgCashFlow / cashFlows.length);\r\n\r\n        const nextTenYearFCF: any = [];\r\n        let isFiveYearDone = false;\r\n        for (let i = 1; i <= 10; i++) {\r\n          if (isFiveYearDone) {\r\n            avgCashFlow =\r\n              avgCashFlow +\r\n              (avgCashFlow / 100) *\r\n                parseInt(newState.nextFiveYearIncrimentRate);\r\n            nextTenYearFCF.push(Math.floor(avgCashFlow));\r\n          } else {\r\n            if (i === 5) {\r\n              isFiveYearDone = true;\r\n            }\r\n            avgCashFlow =\r\n              avgCashFlow +\r\n              (avgCashFlow / 100) *\r\n                parseInt(newState.firstFiveYearIncrimentRate);\r\n            nextTenYearFCF.push(Math.floor(avgCashFlow));\r\n          }\r\n        }\r\n        const nextTenYearFCFPresentValues: any = [];\r\n        let totalFCFPresentValue = 0;\r\n        for (let i = 0; i < nextTenYearFCF.length; i++) {\r\n          const persentValue = Math.floor(\r\n            nextTenYearFCF[i] /\r\n              Math.pow(1 + parseInt(newState.discountRate) / 100, i + 1)\r\n          );\r\n          totalFCFPresentValue = totalFCFPresentValue + persentValue;\r\n          nextTenYearFCFPresentValues.push(persentValue);\r\n        }\r\n\r\n        console.log(nextTenYearFCFPresentValues);\r\n\r\n        const companySellingPrice = nextTenYearFCFPresentValues[9] * 10;\r\n        const pvOfCashOnSellingTime = Math.floor(\r\n          parseInt(newState.cashComapnyHaveWhenWillBeSold) /\r\n            Math.pow(1 + 0.1, 10)\r\n        );\r\n\r\n        const totalValueation =\r\n          (companySellingPrice + pvOfCashOnSellingTime + totalFCFPresentValue) *\r\n          10000000;\r\n\r\n        newState.intrinsicValue =\r\n          totalValueation / parseInt(newState.totalShares);\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return newState;\r\n    }\r\n  }\r\n};\r\n\r\nexport default intrinsicReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport intrinsicReducer from \"../reducers/intrinsicReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  intrinsicReducerState: intrinsicReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  mapDispatchToProps,\r\n  mapStateToProps,\r\n} from \"../viewConnectors/vcIntrinsic\";\r\nimport \"./../style/intrinsic.css\";\r\nimport { Constants } from \"../utils/IntrinsicConstants\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\ninterface IntrinsicViewProps {\r\n  readonly intrinsicState: any;\r\n  readonly onInputChange: (e: any) => any;\r\n  readonly calculateIntrinsicValue: () => void;\r\n  readonly reset: () => void;\r\n}\r\n\r\nclass Intrinsic extends React.Component<IntrinsicViewProps> {\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.props.onInputChange}\r\n            value={this.props.intrinsicState.cashFlowValues}\r\n            name={Constants.FREE_CASH_FLOW_INPUT}\r\n            className=\"form-control marginTop20px\"\r\n            placeholder=\"Enter free cash flow for last 10 years by comma(,) seprated\"\r\n          />\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                name={Constants.TOTAL_SHARE_INPUT}\r\n                value={this.props.intrinsicState.totalShares}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter total number of shares\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                value={this.props.intrinsicState.discountRate}\r\n                name={Constants.DISCOUNT_RATE_INPUT}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter discount rate\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                value={this.props.intrinsicState.firstFiveYearIncrimentRate}\r\n                name={Constants.FIRST_5_YEAR_INC_RATE}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter first 5 year incriment rate\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                name={Constants.NEXT_5_YEAR_INC_RATE}\r\n                value={this.props.intrinsicState.nextFiveYearIncrimentRate}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter next 5 year incriment rate\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            onChange={this.props.onInputChange}\r\n            value={this.props.intrinsicState.cashComapnyHaveWhenWillBeSold}\r\n            name={Constants.CASH_WHEN_COMPANY_WILL_SELL}\r\n            className=\"form-control marginTop20px\"\r\n            placeholder=\"Cash company will have when we sell company after 10 years\"\r\n          />\r\n\r\n          <Button\r\n            onClick={this.props.calculateIntrinsicValue}\r\n            variant=\"primary\"\r\n            className=\"width100Per marginTop20px\"\r\n          >\r\n            Calculate\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={this.props.reset}\r\n            variant=\"primary\"\r\n            className=\"width100Per marginTop20px\"\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n\r\n        <h1 className=\"text-center marginTop20px\">\r\n          Intrinsic Value : {this.props.intrinsicState.intrinsicValue}\r\n        </h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Intrinsic);\r\n","import {\r\n  calculateIntrinsicValue,\r\n  onInputChange,\r\n  reset,\r\n  validateAllFields,\r\n} from \"../reducerActions/intrinsicReducerActions\";\r\n\r\nexport const mapStateToProps = (state: any) => {\r\n  return { intrinsicState: state.intrinsicReducerState };\r\n};\r\n\r\nexport function mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    onInputChange: (e: any) => {\r\n      dispatch(onInputChange(e.target));\r\n    },\r\n\r\n    calculateIntrinsicValue: () => {\r\n      dispatch(validateAllFields());\r\n      dispatch(calculateIntrinsicValue());\r\n    },\r\n\r\n    reset: () => {\r\n      dispatch(reset());\r\n    },\r\n  };\r\n}\r\n","import intrinsicActionTypes from \"../actionTypes/intrinsicActionTypes\";\r\n\r\nexport function onInputChange(data: any) {\r\n  return {\r\n    type: intrinsicActionTypes.CASH_FLOW_INPUT_CHANGE,\r\n    data: data,\r\n  };\r\n}\r\n\r\nexport function calculateIntrinsicValue() {\r\n  return {\r\n    type: intrinsicActionTypes.CALCULATE_INTRINSIC_VALUE,\r\n  };\r\n}\r\n\r\nexport function validateAllFields() {\r\n  return {\r\n    type: intrinsicActionTypes.VALIDATE_FIELDS,\r\n  };\r\n}\r\n\r\nexport function reset() {\r\n  return {\r\n    type: intrinsicActionTypes.RESET_VALUES,\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport Intrinsic from \"./views/intrinsic\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Intrinsic />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}