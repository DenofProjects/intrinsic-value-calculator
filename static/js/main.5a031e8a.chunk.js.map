{"version":3,"sources":["actionTypes/intrinsicActionTypes.ts","utils/IntrinsicConstants.ts","reducers/intrinsicReducer.ts","store/index.ts","views/intrinsic.tsx","viewConnectors/vcIntrinsic.ts","reducerActions/intrinsicReducerActions.ts","App.js","index.js"],"names":["intrinsicActionTypes","Constants","FREE_CASH_FLOW_INPUT","TOTAL_SHARE_INPUT","DISCOUNT_RATE_INPUT","FIRST_5_YEAR_INC_RATE","NEXT_5_YEAR_INC_RATE","CASH_WHEN_COMPANY_WILL_SELL","PASSWORD","COLON","initialState","cashFlowValues","cashComapnyHaveWhenWillBeSold","nextFiveYearIncrimentRate","firstFiveYearIncrimentRate","discountRate","totalShares","intrinsicValue","isAllFieldsFilled","panCardList","investorList","investorDetails","password","intrinsicReducer","state","action","newState","type","CASH_FLOW_INPUT_CHANGE","data","name","value","VALIDATE_FIELDS","alert","RESET_VALUES","CALCULATE_INTRINSIC_VALUE","cashFlows","split","avgCashFlow","console","log","i","length","parseInt","Math","floor","nextTenYearFCF","isFiveYearDone","push","nextTenYearFCFPresentValues","totalFCFPresentValue","persentValue","pow","companySellingPrice","pvOfCashOnSellingTime","totalValueation","ON_PASSWORD_INPUT_CHANGE","INTIAL_INVESTOR_DETAILS","TRANSLATE","ans","codePointAt","codePointAtI","undefined","String","fromCharCode","rootReducer","combineReducers","intrinsicReducerState","store","createStore","applyMiddleware","thunk","Intrinsic","this","props","initialInvestorDetails","Fragment","className","onChange","onInputChange","intrinsicState","placeholder","Button","onClick","calculateIntrinsicValue","variant","reset","passwordInputChange","translate","map","val","React","Component","connect","dispatch","e","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a031e8a.chunk.js","sourcesContent":["enum intrinsicActionTypes {\r\n  CASH_FLOW_INPUT_CHANGE = 8678,\r\n  CALCULATE_INTRINSIC_VALUE,\r\n  VALIDATE_FIELDS,\r\n  RESET_VALUES,\r\n  ON_PASSWORD_INPUT_CHANGE,\r\n  INTIAL_INVESTOR_DETAILS,\r\n  TRANSLATE\r\n}\r\n\r\nexport default intrinsicActionTypes;\r\n","export class Constants {\r\n  public static readonly FREE_CASH_FLOW_INPUT = \"FREE_CASH_FLOW_INPUT\";\r\n  public static readonly TOTAL_SHARE_INPUT = \"TOTAL_SHARE_INPUT\";\r\n  public static readonly DISCOUNT_RATE_INPUT = \"DISCOUNT_RATE_INPUT\";\r\n  public static readonly FIRST_5_YEAR_INC_RATE = \"FIRST_5_YEAR_INC_RATE\";\r\n  public static readonly NEXT_5_YEAR_INC_RATE = \"NEXT_5_YEAR_INC_RATE\";\r\n  public static readonly CASH_WHEN_COMPANY_WILL_SELL =\r\n    \"CASH_WHEN_COMPANY_WILL_SELL\";\r\n  public static readonly PASSWORD = \"PASSWORD\";\r\n  public static readonly COLON = \":\";\r\n}\r\n","import { Reducer } from \"redux\";\r\nimport intrinsicActionTypes from \"../actionTypes/intrinsicActionTypes\";\r\nimport { intrinsicDTO } from \"../DTOs/intrinsicDTO\";\r\nimport { Constants } from \"../utils/IntrinsicConstants\";\r\n\r\nconst initialState: intrinsicDTO = {\r\n  cashFlowValues: \"\",\r\n  cashComapnyHaveWhenWillBeSold: \"\",\r\n  nextFiveYearIncrimentRate: \"\",\r\n  firstFiveYearIncrimentRate: \"\",\r\n  discountRate: \"\",\r\n  totalShares: \"\",\r\n  intrinsicValue: 0,\r\n  isAllFieldsFilled: false,\r\n  panCardList: [\r\n    \"BPKPV9644F\",\r\n    \"BNSPV0977R\",\r\n    \"AOBPC5335F\",\r\n    \"GAZPD5768\",\r\n    \"EMEPR7120A\",\r\n  ],\r\n  investorList: [\r\n    \"Rahul Verma\",\r\n    \"Vijay Verma\",\r\n    \"Charanajit\",\r\n    \"Indra Devi\",\r\n    \"Nisha\",\r\n  ],\r\n  investorDetails: [],\r\n  password: \"\",\r\n};\r\n\r\nconst intrinsicReducer: Reducer<intrinsicDTO> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case intrinsicActionTypes.CASH_FLOW_INPUT_CHANGE: {\r\n      if (action.data.name === Constants.FREE_CASH_FLOW_INPUT)\r\n        newState.cashFlowValues = action.data.value;\r\n      else if (action.data.name === Constants.CASH_WHEN_COMPANY_WILL_SELL) {\r\n        newState.cashComapnyHaveWhenWillBeSold = action.data.value;\r\n      } else if (action.data.name === Constants.DISCOUNT_RATE_INPUT) {\r\n        newState.discountRate = action.data.value;\r\n      } else if (action.data.name === Constants.FIRST_5_YEAR_INC_RATE) {\r\n        newState.firstFiveYearIncrimentRate = action.data.value;\r\n      } else if (action.data.name === Constants.NEXT_5_YEAR_INC_RATE) {\r\n        newState.nextFiveYearIncrimentRate = action.data.value;\r\n      } else if (action.data.name === Constants.TOTAL_SHARE_INPUT) {\r\n        newState.totalShares = action.data.value;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.VALIDATE_FIELDS: {\r\n      if (\r\n        newState.cashComapnyHaveWhenWillBeSold === \"\" ||\r\n        // TODO : cashFlowValues validation pending\r\n        newState.cashFlowValues === \"\" ||\r\n        newState.discountRate === \"\" ||\r\n        newState.firstFiveYearIncrimentRate === \"\" ||\r\n        newState.nextFiveYearIncrimentRate === \"\" ||\r\n        newState.totalShares === \"\"\r\n      ) {\r\n        newState.isAllFieldsFilled = false;\r\n        alert(\"All fields are required\");\r\n      } else {\r\n        newState.isAllFieldsFilled = true;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.RESET_VALUES: {\r\n      newState.cashComapnyHaveWhenWillBeSold = \"\";\r\n      newState.cashFlowValues = \"\";\r\n      newState.discountRate = \"\";\r\n      newState.firstFiveYearIncrimentRate = \"\";\r\n      newState.nextFiveYearIncrimentRate = \"\";\r\n      newState.totalShares = \"\";\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.CALCULATE_INTRINSIC_VALUE: {\r\n      if (newState.isAllFieldsFilled) {\r\n        const cashFlows = newState.cashFlowValues.split(\",\");\r\n        let avgCashFlow = 0;\r\n        console.log(\"CashFlow : \" + cashFlows);\r\n        for (let i = 0; i < cashFlows.length; i++) {\r\n          avgCashFlow = avgCashFlow + parseInt(cashFlows[i]);\r\n        }\r\n        avgCashFlow = Math.floor(avgCashFlow / cashFlows.length);\r\n        console.log(\"avgCashFlow : \" + avgCashFlow);\r\n        if (avgCashFlow <= 0) {\r\n          alert(\"Leave it bhai ji...\");\r\n          return newState;\r\n        }\r\n\r\n        const nextTenYearFCF: any = [];\r\n        let isFiveYearDone = false;\r\n        for (let i = 1; i <= 10; i++) {\r\n          if (isFiveYearDone) {\r\n            avgCashFlow =\r\n              avgCashFlow +\r\n              (avgCashFlow / 100) *\r\n                parseInt(newState.nextFiveYearIncrimentRate);\r\n            nextTenYearFCF.push(Math.floor(avgCashFlow));\r\n          } else {\r\n            if (i === 5) {\r\n              isFiveYearDone = true;\r\n            }\r\n            avgCashFlow =\r\n              avgCashFlow +\r\n              (avgCashFlow / 100) *\r\n                parseInt(newState.firstFiveYearIncrimentRate);\r\n            nextTenYearFCF.push(Math.floor(avgCashFlow));\r\n          }\r\n        }\r\n        console.log(\"nextTenYearFCF : \" + nextTenYearFCF);\r\n        const nextTenYearFCFPresentValues: any = [];\r\n        let totalFCFPresentValue = 0;\r\n        for (let i = 0; i < nextTenYearFCF.length; i++) {\r\n          const persentValue = Math.floor(\r\n            nextTenYearFCF[i] /\r\n              Math.pow(1 + parseInt(newState.discountRate) / 100, i + 1)\r\n          );\r\n          totalFCFPresentValue = totalFCFPresentValue + persentValue;\r\n          nextTenYearFCFPresentValues.push(persentValue);\r\n        }\r\n\r\n        console.log(\r\n          \"nextTenYearFCFPresentValues\" + nextTenYearFCFPresentValues\r\n        );\r\n\r\n        const companySellingPrice = nextTenYearFCFPresentValues[9] * 10;\r\n        const pvOfCashOnSellingTime = Math.floor(\r\n          parseInt(newState.cashComapnyHaveWhenWillBeSold) /\r\n            Math.pow(1 + 0.1, 10)\r\n        );\r\n\r\n        const totalValueation =\r\n          (companySellingPrice + pvOfCashOnSellingTime + totalFCFPresentValue) *\r\n          10000000;\r\n\r\n        newState.intrinsicValue = Math.floor(\r\n          totalValueation / parseInt(newState.totalShares)\r\n        );\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.ON_PASSWORD_INPUT_CHANGE: {\r\n      if (action.data.name === Constants.PASSWORD) {\r\n        newState.password = action.data.value;\r\n      }\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.INTIAL_INVESTOR_DETAILS: {\r\n      for (let i = 0; i < newState.panCardList.length; i++) {\r\n        newState.investorDetails[i] =\r\n          newState.investorList[i] + \" : \" + newState.panCardList[i];\r\n      }\r\n      console.log(\"investorDetails : \" + newState.investorDetails);\r\n      return newState;\r\n    }\r\n\r\n    case intrinsicActionTypes.TRANSLATE: {\r\n      let ans = newState.password.codePointAt(0);\r\n      for (let i = 1; i < newState.password.length; i++) {\r\n        const codePointAtI = newState?.password?.codePointAt(i);\r\n        if (ans !== undefined && codePointAtI !== undefined)\r\n          ans = ans ^ codePointAtI;\r\n      }\r\n      console.log(String.fromCharCode(ans !== undefined ? ans : 0));\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return newState;\r\n    }\r\n  }\r\n};\r\n\r\nexport default intrinsicReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport intrinsicReducer from \"../reducers/intrinsicReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  intrinsicReducerState: intrinsicReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  mapDispatchToProps,\r\n  mapStateToProps,\r\n} from \"../viewConnectors/vcIntrinsic\";\r\nimport \"./../style/intrinsic.css\";\r\nimport { Constants } from \"../utils/IntrinsicConstants\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\ninterface IntrinsicViewProps {\r\n  readonly intrinsicState: any;\r\n  readonly onInputChange: (e: any) => any;\r\n  readonly calculateIntrinsicValue: () => void;\r\n  readonly reset: () => void;\r\n  readonly passwordInputChange: (e: any) => any;\r\n  readonly translate: () => void;\r\n  readonly initialInvestorDetails: () => void;\r\n}\r\n\r\nclass Intrinsic extends React.Component<IntrinsicViewProps> {\r\n  componentDidMount() {\r\n    this.props.initialInvestorDetails();\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.props.onInputChange}\r\n            value={this.props.intrinsicState.cashFlowValues}\r\n            name={Constants.FREE_CASH_FLOW_INPUT}\r\n            className=\"form-control marginTop20px\"\r\n            placeholder=\"Enter free cash flow for last 10 years by comma(,) seprated\"\r\n          />\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                name={Constants.TOTAL_SHARE_INPUT}\r\n                value={this.props.intrinsicState.totalShares}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter total number of shares\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                value={this.props.intrinsicState.discountRate}\r\n                name={Constants.DISCOUNT_RATE_INPUT}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter discount rate\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                value={this.props.intrinsicState.firstFiveYearIncrimentRate}\r\n                name={Constants.FIRST_5_YEAR_INC_RATE}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter first 5 year incriment rate\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                onChange={this.props.onInputChange}\r\n                name={Constants.NEXT_5_YEAR_INC_RATE}\r\n                value={this.props.intrinsicState.nextFiveYearIncrimentRate}\r\n                className=\"form-control marginTop20px\"\r\n                placeholder=\"Enter next 5 year incriment rate\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <input\r\n            type=\"number\"\r\n            onChange={this.props.onInputChange}\r\n            value={this.props.intrinsicState.cashComapnyHaveWhenWillBeSold}\r\n            name={Constants.CASH_WHEN_COMPANY_WILL_SELL}\r\n            className=\"form-control marginTop20px\"\r\n            placeholder=\"Cash company will have when we sell company after 10 years\"\r\n          />\r\n\r\n          <Button\r\n            onClick={this.props.calculateIntrinsicValue}\r\n            variant=\"primary\"\r\n            className=\"width100Per marginTop20px backgroundDarkViolet\"\r\n          >\r\n            Calculate\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={this.props.reset}\r\n            variant=\"primary\"\r\n            className=\"width100Per marginTop20px backgroundDarkViolet\"\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n\r\n        <h1 className=\"text-center marginTop20px\">\r\n          Intrinsic Value : {this.props.intrinsicState.intrinsicValue}\r\n        </h1>\r\n\r\n        {/* TODO : create new files and move code there itself */}\r\n        <div className=\"container investorDetails text-center\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.props.passwordInputChange}\r\n            value={this.props.intrinsicState.password}\r\n            name={Constants.PASSWORD}\r\n            className=\"form-control marginTop20px\"\r\n            placeholder=\"Enter password...\"\r\n          />\r\n          <Button\r\n            onClick={this.props.translate}\r\n            variant=\"primary\"\r\n            className=\"width100Per marginTop20px backgroundDarkViolet\"\r\n          >\r\n            Translate\r\n          </Button>\r\n          {this.props.intrinsicState.investorDetails.map((val: any) => (\r\n            <h1>{val}</h1>\r\n          ))}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Intrinsic);\r\n","import {\r\n  calculateIntrinsicValue,\r\n  initialInvestorDetails,\r\n  onInputChange,\r\n  onPasswordInputChange,\r\n  reset,\r\n  translate,\r\n  validateAllFields,\r\n} from \"../reducerActions/intrinsicReducerActions\";\r\n\r\nexport const mapStateToProps = (state: any) => {\r\n  return { intrinsicState: state.intrinsicReducerState };\r\n};\r\n\r\nexport function mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    onInputChange: (e: any) => {\r\n      dispatch(onInputChange(e.target));\r\n    },\r\n\r\n    calculateIntrinsicValue: () => {\r\n      dispatch(validateAllFields());\r\n      dispatch(calculateIntrinsicValue());\r\n    },\r\n\r\n    reset: () => {\r\n      dispatch(reset());\r\n    },\r\n\r\n    // investor code\r\n    passwordInputChange: (e: any) => {\r\n      dispatch(onPasswordInputChange(e.target));\r\n    },\r\n\r\n    translate: () => {\r\n      dispatch(translate());\r\n    },\r\n\r\n    initialInvestorDetails: () => {\r\n      dispatch(initialInvestorDetails());\r\n    },\r\n  };\r\n}\r\n","import intrinsicActionTypes from \"../actionTypes/intrinsicActionTypes\";\r\n\r\nexport function onInputChange(data: any) {\r\n  return {\r\n    type: intrinsicActionTypes.CASH_FLOW_INPUT_CHANGE,\r\n    data: data,\r\n  };\r\n}\r\n\r\nexport function calculateIntrinsicValue() {\r\n  return {\r\n    type: intrinsicActionTypes.CALCULATE_INTRINSIC_VALUE,\r\n  };\r\n}\r\n\r\nexport function validateAllFields() {\r\n  return {\r\n    type: intrinsicActionTypes.VALIDATE_FIELDS,\r\n  };\r\n}\r\n\r\nexport function reset() {\r\n  return {\r\n    type: intrinsicActionTypes.RESET_VALUES,\r\n  };\r\n}\r\n\r\n// investor code starts here\r\nexport function onPasswordInputChange(data: any) {\r\n  return {\r\n    type: intrinsicActionTypes.ON_PASSWORD_INPUT_CHANGE,\r\n    data: data,\r\n  };\r\n}\r\n\r\nexport function translate() {\r\n  return {\r\n    type: intrinsicActionTypes.TRANSLATE,\r\n  };\r\n}\r\n\r\nexport function initialInvestorDetails() {\r\n  return {\r\n    type: intrinsicActionTypes.INTIAL_INVESTOR_DETAILS,\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport Intrinsic from \"./views/intrinsic\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Intrinsic />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}